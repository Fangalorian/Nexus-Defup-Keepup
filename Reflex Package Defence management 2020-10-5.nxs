{"name":"defence management","enabled":true,"description":"Handling Defup/Keepup","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"// Place any code here you'd like to autorun when the system is loaded\n\n\nrun_function('Defence Management', {}, 'Defence management');\nrun_function('Client Overrides', {}, 'Defence management');","items":[]},{"type":"alias","name":"Load Package","enabled":true,"id":4,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"onLoad"},{"action":"script","script":"//Enter the script here\nprint('[defs]: Defence handling package loaded', 'white');\nsend_command('glance');"}],"text":"def load","items":[]},{"type":"group","name":"Defence Management","enabled":true,"id":25,"items":[{"type":"function","name":"Client Overrides","enabled":true,"id":22,"code":"// Override client's generate_text_block function to save the most recent prompt in defences.prompt.\n// The only change we made is adding the line: defences.prompt = pr;\n// You can ctrl+f to find it close to the bottom.\n// It is highly advised that you DO NOT modify this function at all as improper modification\n// will prevent any output from showing up in your main window until the changes are reverted.\n\nclient.generate_text_block = function(lines) {\n    let count = 0;\n\n    let timestamp;\n    if (client.show_timestamp_milliseconds === true)\n        timestamp = client.getTimeMS();\n    else\n        timestamp = client.getTimeNoMS();\n    let cl = \"timestamp mono no_out\";\n    timestamp = \"<span class=\\\"\" + cl + \"\\\">\" + timestamp + \"&nbsp;</span>\";\n\n    let res = '';\n\n    let counter = 0;\n    for (let i = 0; i < lines.length; ++i) {\n        let txt = lines[i].parsed_line;\n        let font = lines[i].monospace ? 'mono' : '';\n        let line = \"<p class=\\\"\" + font + \"\\\">\" + timestamp + (txt ? txt.formatted() : '') + \"</p>\";\n        \n        if (lines[i].gag) continue;\n        //////// Moved because don't want gagged lines\n        if (logging && txt) append_to_log(line);\n\n        //if (lines[i].gag) continue;\n        counter++;\n\n        if (txt) {\n            count++;\n            res += line;\n        }\n        let pr = lines[i].parsed_prompt;\n        if (pr && (count > 0)) {   // no prompt if we gagged everything\n            \n            line = \"<p class=\\\"prompt \" + font + \"\\\">\" + timestamp + pr.formatted() + \"</p>\";\n            if (logging) append_to_log(line);\n            res += line;\n        }\n        \n        // Sets defences prompt for the prompts between displays\n        defences.prompt = pr;\n        \n        // empty line - include it if it's neither the first nor the last one\n        // using \"counter\" instead of \"i\" fixes problems where the empty line is included after channel markers and such\n        if ((!pr) && (!txt) && (counter > 1) && (i < lines.length - 1)) {\n            res += '<p>' + timestamp + '&nbsp;' + '</p>';\n        }\n    }\n    if (client.extra_break && res.length) res += \"<br />\";\n\n    return res;\n};"},{"type":"function","name":"Defence Management","enabled":true,"id":21,"code":"// References the onGMCP function for enabling/disabling when checking if defup is completed.\ndefup_complete_check = reflex_find_by_name('function', 'onGMCP', true, false, 'Defence management');\n\n\n/*******************************************************************************\n********************************************************************************\n**\n**\tVariables hold defup/keepup configurations and general known defences.\n**\tFunctions modify defence configurations and provide an interactive visual \n**\tdisplay in the main output window.\n**\n**\tAs I don't have a lot of classes, many of the class specific defences are\n**\tnot implemented. To add them, please locate the 'class_defs' object \n**\t(it is preceded by a '//Class specific defences' comment) and insert the \n**\tGMCP name of the defence you want to add into the corresponding class'\n**\tarray. \n**\n**\t(GMCP name is whatever name you would use to raise the defence\n**\tif you were to do 'curing priority defence <defence> <priority>' as that\n**\tcommand is how the package implements a defup/keepup system.)\n**\n**\tI.e. If I wanted to add the resistance defence to the monk's class specific \n**\tdefences, it would look something along the lines of:\n**\t\n**\tclass_defs = {\n**\t\t...,\n**      ...,\n**      ...,\n**      Monk: ['immunity', 'resistance'],\n**\t\t...,\n**      ...,\n**\t},\n**\n*********************************************************************************\n********************************************************************************/\n\ndefences = {\n\n    // Used for multiclass swapping\n    current_class: GMCP.Status.class,\n\n    // contains a prompt that we can slam at the end of a display for a nice delimiter\n    prompt: '',\n\n    // Contain defences used in custom keepup/defup configurations\n    class_settings: get_variable('class_settings') || {\n        Alchemist: {defup: [], keepup:[]},\n        Apostate: {defup: [], keepup:[]},\n        Bard: {defup: [], keepup:[]},\n        Blademaster: {defup: [], keepup:[]},\n        Depthswalker: {defup: [], keepup:[]},\n        Druid: {defup: [], keepup:[]},\n        Infernal: {defup: [], keepup:[]},\n        Jester: {defup: [], keepup:[]},\n        Magi: {defup: [], keepup:[]},\n        Monk: {defup: [], keepup:[]},\n        Occultist: {defup: [], keepup:[]},\n        Paladin: {defup: [], keepup:[]},\n        Priest: {defup: [], keepup:[]},\n        Psion: {defup: [], keepup:[]},\n        Runewarden: {defup: [], keepup:[]},\n        Sentinel: {defup: [], keepup:[]},\n        Serpent: {defup: [], keepup:[]},\n        Shaman: {defup: [], keepup:[]},\n        Sylvan: {defup: [], keepup:[]},\n        'Red Dragon': {defup: [], keepup:[]},\n        'Black Dragon': {defup: [], keepup:[]},\n        'Silver Dragon': {defup: [], keepup:[]},\n        'Gold Dragon': {defup: [], keepup:[]},\n        'Blue Dragon': {defup: [], keepup:[]},\n        'Green Dragon': {defup: [], keepup:[]},\n        'earth Elemental Lord': {defup: [], keepup:[]},\n        'water Elemental Lord': {defup: [], keepup:[]},\n        'air Elemental Lord': {defup: [], keepup:[]},\n        'fire Elemental Lord': {defup: [], keepup:[]},\n    },\n\n    // Class specific defences\n    class_defs: {\n        Alchemist: [],\n        Apostate: [],\n        Bard: [],\n        Blademaster: ['constitution', 'retaliation', 'weathering', 'shinbinding', 'waterwalking', 'shinclarity', 'shintrance', 'consciousness', 'toughness', 'mindnet'],\n        Depthswalker: [],\n        Druid: [],\n        Infernal: [],\n        Jester: ['slippery', 'gripping'],\n        Magi: [],\n        Monk: [],\n        Occultist: [],\n        Paladin: [],\n        Priest: [],\n        Psion: [],\n        Runewarden: ['deflect', 'resistance', 'weathering', 'fury', 'standingfirm', 'gripping'],\n        Sentinel: [],\n        Serpent: [],\n        Shaman: [],\n        Sylvan: [],\n        'Red Dragon': ['dragonarmour', 'dragonbreath'],\n        'Black Dragon': ['dragonarmour', 'dragonbreath'],\n        'Silver Dragon': ['dragonarmour', 'dragonbreath'],\n        'Gold Dragon': ['dragonarmour', 'dragonbreath'],\n        'Blue Dragon': ['dragonarmour', 'dragonbreath'],\n        'Green Dragon': ['dragonarmour', 'dragonbreath'],\n        'earth Elemental Lord': ['extrusion', 'strata', 'tremorsense'],\n        'water Elemental Lord': [],\n        'air Elemental Lord': [],\n        'fire Elemental Lord': [],\n    },\n\n    // Defences universally available for use\n    universal_defs: [\n        'airpocket',\n        'alertness',\n        'blindness',\n        'clinging',\n        'cloak',\n        'coldresist',\n        'curseward',\n        'deafness',\n        'deathsight',\n        'density',\n        'electricresist',\n        'fangbarrier',\n        'fireresist',\n        'groundwatch',\n        'heldbreath',\n        'hypersight',\n        'insomnia',\n        'insulation',\n        'kola',\n        'levitating',\n        'magicresist',\n        'metawake',\n        'mindseye',\n        'nightsight',\n        'poisonresist',\n        'rebounding',\n        'satiation',\n        'scholasticism',\n        'selfishness',\n        'skywatch',\n        'softfocus',\n        'speed',\n        'telesense',\n        'temperance',\n        'thirdeye',\n        'treewatch',\n        'vigilance',\n    ],\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defence list manipulation functions. The more general functions are\n    **  defined first, followed by the specific ones that make use of them.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // General defence addition/removal from a defence configuration list\n    add_to_defence_list: (def_list, defence) => {\n        // Adds defence to specified defence list if defence is not yet in list\n        if (!def_list.includes(defence)) {\n            def_list.push(defence);\n        }\n    },\n\n    remove_from_defence_list: (def_list, defence) => {\n        // Removes defence from specified list if defence is present in list\n        if (def_list.includes(defence)) {\n            def_list.splice(def_list.indexOf(defence), 1);\n        }\n    },\n\n    // Specific defup/keepup removal\n    add_to_defup: (defence) => {\n        defences.add_to_defence_list(defences.class_settings[GMCP.Status.class].defup, defence)\n    },\n\n    remove_from_defup: (defence) => {\n        defences.remove_from_defence_list(defences.class_settings[GMCP.Status.class].defup, defence);\n    },\n\n    add_to_keepup: (defence) => {\n        defences.add_to_defence_list(defences.class_settings[GMCP.Status.class].keepup, defence);\n    },\n\n    remove_from_keepup: (defence) => {\n        defences.remove_from_defence_list(defences.class_settings[GMCP.Status.class].keepup, defence);\n    },\n\n\n\n    // General toggle of defence addition/removal from a defence list\n    toggle_defence_list_def: (def_list, defence) => {\n        // Removes defence from specified list if defence is in list\n        // Otherwise, adds defence to list\n        if (def_list.includes(defence)) {\n            defences.remove_from_defence_list(def_list, defence);\n        }\n        else {\n            defences.add_to_defence_list(def_list, defence);\n        }\n\n    },\n\n    // Specific toggle of defup/keepup addition/removal\n    toggle_defup_def: (defence) => {\n        defences.toggle_defence_list_def(defences.class_settings[GMCP.Status.class].defup, defence);\n    },\n\n    toggle_keepup_def: (defence) => {\n        defences.toggle_defence_list_def(defences.class_settings[GMCP.Status.class].keepup, defence);\n    },\n\n\n\n    // General activation/deactivation of raising defences of a defence List\n    activate_defence_list: (def_list, state) => {\n        let priority = state ? 25 : 'reset';\n        let command = `curing priority defence ${def_list.map(def => `${def} ${priority}`).join(' ')}`;\n        send_command(command);\n    },\n\n    // Specific activation/deactivation of raising defences in keepup/defup\n    defup: () => {\n        defences.activate_defence_list(defences.class_settings[GMCP.Status.class].defup, true)\n    },\n\n    defdown: () => {\n        defences.activate_defence_list(defences.class_settings[GMCP.Status.class].defup, false)\n    },\n\n    keepup: () => {\n        defences.activate_defence_list(defences.class_settings[GMCP.Status.class].keepup, true)\n    },\n\n    keepdown: () => {\n        defences.activate_defence_list(defences.class_settings[GMCP.Status.class].keepup, false)\n    },\n\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defence list visual display and editing functions. Will enable a\n    **  clickable display of defences possible to put up. Clicking a defence\n    **  will either add or remove it from a specific defence list under proper\n    **  circumstances.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // Formats and displays defences for a specified defence list\n    // Parameters:\n    //              - def_vars: an array of defences to display (will not be modified)\n    //                  - i.e. universal_defs\n    //              - def_list: either defup_defs or keepup_defs (will be modified)\n    //                  - if null, only display the defs and do not modify anything\n    //              - function_indicator: null or 'd' or 'k'\n    //                  - used to continually display updates to display when using onclick action\n    //                  - indicates whether to use defup or keepup functions for onclick\n    //                      - null indicates no onclick\n    //                      - 'd' indicates use of defup specific functions\n    //                      - 'k' indicates use of keepup specific functions\n    defence_display: (def_vars, def_list, function_indicator) => {\n        let padding = ' ';  // Padding to be used in the formatting\n        let display = null; // Will hold the html configuration of all defences for display\n\n        // Formats each defence in the desired html\n        if (function_indicator == null) {\n            display = def_vars.map(def => `<span><a style=\"color: #AFEEEE;\">[ ] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n        }\n        else if (function_indicator == 'd') {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_defup_def('${def}');defences.display_defup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${def_list.includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n        }\n        else {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_keepup_def('${def}');defences.display_keepup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${def_list.includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n        }\n\n        // Adds a line break after every third formatted defence\n        for (let idx = 2; idx < display.length; idx += 3) {\n            display[idx] = `${display[idx]}<br/>`;\n        }\n\n        // Makes one large formatted string to display\n        display = `<p>${display.join('')}</p>`;\n\n        // Prints out the formatted defences to main gameplay screen\n        ow_Write(\"#output_main\", display);\n    },\n\n    // Displays available defences solely for viewing (does NOT allow modification)\n    display_defences: () => {\n        // Display universal defences\n        ow_Write(\"#output_main\", \"<p style='color: white;'>[def]: Universal defences (click to toggle):</p>\");\n        defences.defence_display(defences.universal_defs, null, null);\n\n        if (defences.class_defs[GMCP.Status.class].length != 0) {\n            print(`[defs]: ${GMCP.Status.class} defences:`,\"white\");\n            defences.defence_display(defences.class_defs[GMCP.Status.class], null, null)\n        }\n\n        // Output a prompt for a nice delimiter between displays\n        let line = \"<p class=\\\"prompt mono\\\">\" + defences.prompt.formatted() + \"</p>\";\n        ow_Write(\"#output_main\", line);\n    },\n\n    // Displays available defences for customising defup defences\n    // Also displays current defup configuration\n    display_defup_defences: () => {\n        // Display defences available for defup\n        ow_Write(\"#output_main\", \"<p style='color: white;'>[defs]: Universal defup defences (click to toggle):</p>\");\n        defences.defence_display(defences.universal_defs, defences.class_settings[GMCP.Status.class].defup, 'd');\n\n        if (defences.class_defs[GMCP.Status.class].length != 0) {\n            print(`[defs]: ${GMCP.Status.class} defences:`,\"white\");\n            defences.defence_display(defences.class_defs[GMCP.Status.class], defences.class_settings[GMCP.Status.class].defup, 'd')\n        }\n\n        // Output a prompt for a nice delimiter between displays\n        let line = \"<p class=\\\"prompt mono\\\">\" + defences.prompt.formatted() + \"</p>\";\n        ow_Write(\"#output_main\", line);\n    },\n\n    // Displays available defences for customising keepup defences\n    // Also displays current keepup configuration\n    display_keepup_defences: () => {\n        // Display defences available for keepup\n        ow_Write(\"#output_main\", \"<p style='color: white;'>[defs]: Universal keepup defences (click to toggle):</p>\");\n        defences.defence_display(defences.universal_defs, defences.class_settings[GMCP.Status.class].keepup, 'k');\n\n        if (defences.class_defs[GMCP.Status.class].length != 0) {\n            print(`[defs]: ${GMCP.Status.class} defences:`,\"white\");\n            defences.defence_display(defences.class_defs[GMCP.Status.class], defences.class_settings[GMCP.Status.class].keepup, 'k')\n        }\n\n\n        // Output a prompt for a nice delimiter between displays\n        let line = \"<p class=\\\"prompt mono\\\">\" + defences.prompt.formatted() + \"</p>\";\n        ow_Write(\"#output_main\", line);\n    },\n\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Auxilary functions for checking defup completion, handling class\n    **  specific defences on class swap, saving configuration state between\n    **  login sessions, and showing displaying package_commands.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // Checks if all defenes in defup_defs are present in GMCP.Defences\n    is_defup_complete: () => {\n        let current_defs = Object.keys(GMCP.Defences);\n        return defences.class_settings[GMCP.Status.class].defup.every(def => current_defs.includes(def));\n    },\n\n    // Resets keepup prio of class specific defences\n    swapped_class: () => {\n        print(`[defs]: Swapped to ${GMCP.Status.class}. Deactivating ${defences.current_class} defences.`, 'white');\n        print(`[defs]: Initiating ${GMCP.Status.class} keepup!`, 'white');\n        let command = `curing priority defence ${defences.class_defs[defences.current_class].map(def => `${def} reset`).join(' ')}`;\n        send_command(command);\n        defences.current_class = GMCP.Status.class;\n        defences.keepup();\n    },\n\n    // Saves defup_defs and keepup_defs for storage between login sessions\n    save_defence_lists: () => {\n        set_variable('class_settings', defences.class_settings);\n        client.gmcp_save_system(true);\n    },\n\n    // Displays commands\n    display_menu: () => {\n        print('Defence package commands:', 'white');\n        print('   defs'.padEnd(33,' ') + '- shows defup/keepup package commands');\n        print('   defshow [defs|defup|keepup]'.padEnd(33,' ') + '- shows modifiable defence configuration');\n        print('   def save'.padEnd(33,' ') + '- saves current settings using set_variable()');\n        print('   def load'.padEnd(33,' ') + '- reloads package functions');\n        print('   en [defup|keepup]'.padEnd(33,' ') + '- enables defup/keepup (puts up defences)');\n        print('   dn [defup|keepup]'.padEnd(33,' ') + '- disables defup/keepup (resets defence prio)');\n    },\n\n\n    // Prints out the defup_defs array\n    show_defup: () => {console.log(defences.class_settings[GMCP.Status.class].defup)}\n\n};\n"},{"type":"function","name":"onGMCP","enabled":false,"id":27,"code":"//Enter the function here\nif (args.gmcp_method == \"Char.Defences.Add\") {\n    if (defences.is_defup_complete()) {\n        print(\"(defs): Defup complete! Resetting curing defence upkeep prios.\", 'white');\n        defences.defdown();\n        reflex_disable(defup_complete_check);\n    }\n}"},{"type":"alias","name":"Show Menu","enabled":true,"id":32,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"defences.display_menu();"}],"text":"defs"},{"type":"alias","name":"Display Defences","enabled":true,"id":19,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let setting = args[1];\nif (setting == 'defs') {\n    defences.display_defences();\n}\nelse if (setting == 'defup') {\n    defences.display_defup_defences();\n}\nelse {\n    defences.display_keepup_defences();\n}"}],"text":"^defshow (defs|defup|keepup)$"},{"type":"alias","name":"Modify Defup/Keepup","enabled":true,"id":26,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// manual version of clicking on the defshow defup/keepup tables\n\nif (args[1] == 'add') {\n    if (defences.universal_defs.includes(args[2]) || \n        defences.class_defs[GMCP.Status.class].includes(args[2]) ) {\n        \n        if (args[3] == 'defup') {\n            defences.add_to_defup(args[2]);\n            defences.display_defup_defences();\n        }\n        else {\n            defences.add_to_keepup(args[2]);\n            defences.display_keepup_defences();\n        }\n    }\n}\nelse {\n    if (args[3] == 'defup') {\n        defences.remove_from_defup(args[2]);\n        defences.display_defup_defences();\n    }\n    else {\n        defences.remove_from_keepup(args[2]);\n        defences.display_keepup_defences();\n    }\n}\n"}],"text":"^def (add|remove) (\\w+) (defup|keepup)$"},{"type":"alias","name":"Save settings","enabled":true,"id":38,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"defences.save_defence_lists();\nprint('[defs]: Saved defup/keepup settings!', 'white');"}],"text":"def save"},{"type":"alias","name":"Enable Defup/Keepup","enabled":true,"id":23,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"print(`[defs]: Enabled ${args[1]}.`, 'white');\nif (args[1] == 'defup') {\n    if (defences.is_defup_complete()) {\n        print(\"(defs): Defup complete! Resetting curing defence upkeep prios.\", 'white');\n        reflex_disable(defup_complete_check);\n    }\n    else {\n        print('(defs): Beginning defup. Hold still a moment.', 'white');\n    \tdefences.defup();\n        reflex_enable(defup_complete_check);\n    }\n}\nelse {\n    defences.keepup();\n};"}],"text":"^en (defup|keepup)$"},{"type":"alias","name":"Disable Defup/Keepup","enabled":true,"id":24,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"print(`[defs]: Disabled ${args[1]}.`, 'white');\nif (args[1] == 'defup') {\n    defences.defdown();\n}\nelse {\n    defences.keepdown();\n};"}],"text":"^dn (defup|keepup)$"},{"type":"trigger","name":"Save on QQ","enabled":true,"id":28,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You grow still and begin to silently pray for preservation of your soul while you are out of the land.","actions":[{"action":"script","script":"defences.save_defence_lists();\ndefences.keepdown();"}]},{"type":"trigger","name":"Swapped class","enabled":true,"id":31,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You are now a member of the (?:\\w+) class\\.$","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"group","name":"Form Changing","enabled":true,"id":36,"items":[{"type":"trigger","name":"Dragonformed","enabled":true,"id":33,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"With an ear-splitting roar, you rear back your draconic head and scream out your triumph.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Lesserformed","enabled":true,"id":34,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Your draconic form melts away, leaving you suddenly weaker and more vulnerable.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Forsake Earth","enabled":true,"id":35,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Primal earth abandons you, your flawed physicality reasserting itself once more as you forsake your primordial form.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Prevail (Earth)","enabled":true,"id":37,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"As the earth rises to clad your growing form in a skin of stone, you scream out in triumph, the very blood of Earth surging through your granite veins. By the will of Garash, Earth is yours to command!","actions":[{"action":"script","script":"defences.swapped_class();"}]}],"actions":[]}],"actions":[]}]}